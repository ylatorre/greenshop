{% block title %}{% endblock %}

{% block body %}

	{% include './composant/Header.html.twig' %} 
	{# {% include './composant/PageStyle.html.twig' %} #}

	<div class="flex mt-28 flex-col flex-row items-center justify-between text-xl ">
		<h1 class="text-3xl  text-gray-900 font-bold m-4 sm:mb-0">PANIER</h1>
	</div>
	<div class="flex flex-col sm:flex-row w-full h-screen">
		<div class="w-full sm:w-1/6"></div>
		<div class="w-full sm:w-5/6 px-4 sm:px-0">


			{% if panier %}
				<ul>

					{% for ficheProduit in panier.getFicheProduits %}
						<div class="border-b-2 border-gray-300 p-3 m-3">
							<div class="mb-4">

								<div class="col-1 flex justify-between">
									<span class="text-base">{{ ficheProduit.titre }}</span>
									<form action="/supprimer/{{ ficheProduit.id }}" method="post">
										<button type="submit" class="text-basic">
											X
										</button>
									</form>
								</div>

								<div>
									<span class="text-base">
										{{ ficheProduit.prix }}
										€
									</span>
								</div>

								<div>
									<span class="col-2" class="text-base">
										Bio
									</span>
								</div>

								<div>
									<span class="text-base">
										Taille : XL
									</span>
								</div>

								<div class="flex items-center mt-2">
									<div class="border border-grey-500 rounded-full">
										<button class="px-2 py-1 mr-2 ml-2" onclick="decreaseQuantity()">
											-
										</button>
										<span id="quantityDisplay" class="text-gray-700 px-2">
											<!-- Display quantity here -->
											<script>
												// Récupérer la quantité depuis le stockage local et l'afficher
												document.getElementById('quantityDisplay').innerText = localStorage.getItem('quantity') || 1;
											</script>
										</span>
										<button class="px-2 py-1 ml-2 mr-2" onclick="increaseQuantity()">
											+
										</button>
									</div>
								</div>


							</div>
						</div>
					{% endfor %}


				</ul>

			{% else %}
				<div class="text-gray-900 mt-8 sm:mt-20">
					<h2 class="text-3xl sm:text-5xl font-semibold">Historique des commandes</h2>
					<h2 class="text-xl sm:text-2xl font-light">Vous n'avez pas encore passé de commande.</h2>
				</div>
			{% endif %}
			<div class="p-3 m-3">
				<button id="checkout-button" class="flex justify-center space-x-2 w-full bg-green-800 hover:bg-green-700 text-white  py-2 px-4 rounded-full focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out">
					<h1>
						Procéder au paiement |</h1>
					<h1 class="font-bold">
						{{ prixTotal }}€
					</h1>
				</button>
			</div>

		</div>


		<div class="w-full sm:w-1/6"></div>
	</div>

	{% include './composant/bottomBar.html.twig' %}


</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://js.stripe.com/v3/"></script></body></html><script>var stripe = Stripe('pk_test_51OfQTfIt7t0x5dTglGHreq6TfXNXoTLuXW9HOvi24as0oEkvSxzXWNZBuYwfS9rnbVNFs8umnJRkDdEtIQo9FBTZ00h6Y2jXk2');

var checkoutButton = document.getElementById('checkout-button');
checkoutButton.addEventListener('click', function () { // Créer une session de paiement sur le serveur (voir étape dans le contrôleur Symfony)
fetch('/create-checkout-session', {method: 'POST'}).then(function (response) {
return response.json();
}).then(function (session) {
console.log("Session ID:", session.id); // Afficher le Session ID pour le débogage
if (! session.id) {
throw new Error("Session ID not found in response");
}
return stripe.redirectToCheckout({sessionId: session.id});
}).catch(function (error) {
console.error("Error:", error);
});
});


  let quantity = localStorage.getItem('quantity') || 1; // Récupérer la quantité depuis le stockage local ou utiliser 1 par défaut

$(document).ready(function() {
    // Initialiser la quantité affichée
    $('#quantityDisplay').text(quantity);
});

function decreaseQuantity() {
    if (quantity > 1) {
        quantity--;
        updateQuantity(-1); // Appeler updateQuantity avec -1 pour diminuer la quantité
    }
}

function increaseQuantity() {
    quantity++;
    updateQuantity(1); // Appeler updateQuantity avec 1 pour augmenter la quantité
}

function updateQuantity(change) {
    let currentQuantity = parseInt($('#quantityDisplay').text());
    let newQuantity = currentQuantity + change;

    // Mettre à jour la quantité dans le stockage local
    localStorage.setItem('quantity', newQuantity);

    // Envoyer la requête AJAX pour mettre à jour la quantité sur le serveur
    $.ajax({
        url: '/update-quantity', // Modifier l'URL selon votre route Symfony
        type: 'POST',
        data: { quantity: newQuantity },
        success: function(response) {
            // Mettre à jour la quantité affichée si la mise à jour a réussi
            $('#quantityDisplay').text(newQuantity);
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors de la mise à jour de la quantité:', error);
        }
    });
}

</script>

{% endblock %}
